package merge.pdfstod.GUI;

/* Fungerande 120420. Flyttad till 1.6
 * Detta är den kod som hämtats sist från PDFBox.
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import org.apache.pdfbox.pdfviewer.ReaderBottomPanel;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.util.ExtensionFileFilter;
//import GUI.SummarizerPanel;

import javax.swing.JFileChooser;
import javax.swing.JScrollPane;
import javax.swing.JPanel;
import javax.swing.KeyStroke;

import java.awt.print.PrinterException;
import java.io.File;
import java.io.IOException;
import java.util.List;
import merge.pdfstod.pdfstod3.PageWrapper;
import merge.pdfstod.pdfstod3.ReplaceStringStreamEngine;


/**
 * An application to read PDF documents.  This will provide Acrobat Reader like
 * funtionality.
 *
 * @author <a href="ben@benlitchfield.com">Ben Litchfield</a>
 * @version $Revision: 1.5 $
 */
public class CogSumSim extends javax.swing.JFrame
{
    // AH* Variablerna nedan används för att presentera menyer och paneler i JFrame.
    // De är inte nödvändiga (utom panelerna) för CogSum.
    
    private File currentDir=new File(".");
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem printMenuItem;
    private javax.swing.JMenu viewMenu;
    private javax.swing.JMenuItem nextPageItem;
    private javax.swing.JMenuItem previousPageItem;
    private javax.swing.JMenuItem visaSumDialogItem;
    private SummarizerFrame SumDialog;
    public SummarizerPanelPDF sumPan;
    private JPanel documentPanel = new JPanel();
    private ReaderBottomPanel bottomStatusPanel = new ReaderBottomPanel();
    public static PDFReader pdfreader; // = new PDFReader( true );

    public SummarizerPanelPDF getSummarizerPanel()
    {
        return sumPan;
    }

    public JPanel getDocumentPanel()
    {
        return documentPanel;
    }

    public void setSummarizerPanel7(SummarizerPanelPDF sp)
    {
        sumPan = sp;
    }

    public void setDocumentPanel(JPanel jdp)
    {
        documentPanel = jdp;
    }

    private static Boolean EasyReader; // AH* Visar om klassen används med EasyReader.

    private PDDocument document = null;
    private List pages= null;

    public int currentPage = 0;
    private int numberOfPages = 0;

    private String currentFilename = null;
    private ReplaceStringStreamEngine rsse = null;
    private static String pdfname = "";
    public static int sumslidval = 0;
    /**
     * Constructor.
     */
    public CogSumSim()
    {
        EasyReader = true; // AH* nyligen ändrad.
        initComponents();
        //AH* Tillagt.
        try
        {
            rsse = new ReplaceStringStreamEngine();
        } catch (java.io.IOException jiioe)
        {
            SkrivUt(0, "Kan inte initiera ReplaceStringStreamEngine");
        }
    }
    
    /* Konstruktor för anrop från EasyReader.
     * 
     */

    public CogSumSim(Boolean easyreader)
    {
        EasyReader = easyreader;
        initComponents();
        //AH* Tillagt.
        try
        {
            rsse = new ReplaceStringStreamEngine();
        } catch (java.io.IOException jiioe)
        {
            SkrivUt(0, "Kan inte initiera ReplaceStringStreamEngine");
        }
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    
    private void initComponents()
    {
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();
        printMenuItem = new javax.swing.JMenuItem();
        viewMenu = new javax.swing.JMenu();
        nextPageItem = new javax.swing.JMenuItem();
        previousPageItem = new javax.swing.JMenuItem();
        visaSumDialogItem = new javax.swing.JMenuItem();
        SumDialog = new SummarizerFrame( pdfreader ); // pdfreader, false); //AH* xxx nyändrat.
        sumPan = pdfreader.getSummarizerPanel();
        documentPanel = pdfreader.getDocumentPanel();
        // sumPan = new SummarizerPanel( pdfreader ); // AH* tillagd. "this" tidigare.
        // sumPan.setSize(100, 30); // AH* tillagd.

        setTitle("EasyReader - PDF Reader");
        addWindowListener(new java.awt.event.WindowAdapter()
        {
            public void windowClosing(java.awt.event.WindowEvent evt)
            {
                exitApplication();
            }
        });


        JScrollPane documentScroller = new JScrollPane();
        documentScroller.setViewportView( documentPanel );

        getContentPane().add( sumPan, java.awt.BorderLayout.NORTH); // AH* SumPan.
        getContentPane().add( documentScroller, java.awt.BorderLayout.CENTER );
        getContentPane().add( bottomStatusPanel, java.awt.BorderLayout.SOUTH );

        fileMenu.setText("Arkiv");
        openMenuItem.setText("Öppna");
        openMenuItem.setToolTipText("Öppna PDF fil");
        openMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                openMenuItemActionPerformed(evt);
            }
        });

        fileMenu.add(openMenuItem);

        printMenuItem.setText( "Skriv ut" );
        printMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                try
                {
                    if (document != null)
                    {
                        document.print();
                    }
                }
                catch( PrinterException e )
                {
                    e.printStackTrace();
                }
            }
        });
        fileMenu.add( printMenuItem );

        exitMenuItem.setText("Avsluta");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                exitApplication();
            }
        });

        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setText("Hjälp");
        contentsMenuItem.setText("Innehåll");
        helpMenu.add(contentsMenuItem);

        aboutMenuItem.setText("Om...");
        helpMenu.add(aboutMenuItem);

        viewMenu.setText("Visa");
        nextPageItem.setText("Nästa sida");
        nextPageItem.setAccelerator(KeyStroke.getKeyStroke('+'));
        nextPageItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                // nextPage();
            }
        });
        viewMenu.add(nextPageItem);

        previousPageItem.setText("Föregående sida");
        previousPageItem.setAccelerator(KeyStroke.getKeyStroke('-'));
        previousPageItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                // previousPage();
            }
        });
        viewMenu.add(previousPageItem);

        visaSumDialogItem.setText("Visa sammanfattningsdialog");
        // visaSumDialogItem.setAccelerator(KeyStroke.getKeyStroke('-'));
        visaSumDialogItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                showSummarizerDialogue();
                // previousPage();
            }
        });
        viewMenu.add(visaSumDialogItem);

        menuBar.add(viewMenu);

        menuBar.add(helpMenu); // AH* Avkommenterad.

        setJMenuBar(menuBar);


        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-700)/2, (screenSize.height-600)/2, 700, 600);
    }

    private void showSummarizerDialogue()
    {
        SumDialog.setVisible(true);
    }

    /* SkrivUt styr om utskrift skall göras.
     * Tillhör API.
     */

    public static void SkrivUt(int plats, String str)
    {
        switch (plats)
        {
            case 0 : System.out.println(str);
            break;
            case 1 : // System.out.println(str);
            break;
            case 2 : // System.out.println(str);
            break;
            case 3 : System.out.println(str);
            break;
            case 4 : // System.out.println(str);
            break;
            case 5 : System.out.println(str);
            break;
            case 6 : System.out.println(str);
            break;
            case 7 : System.out.println(str);
            break;
            default: System.out.println("Ingen match i Skrivut!");
            break;

        }
    }

    // AH* Sätter titeln på fönstret.
    private void updateTitle() {
        setTitle( "EasyReader - " + pdfname); // AH* currentFilename );
    }

    /* Finns i PDFReader.
    public void nextPage()
    {
        if (currentPage < numberOfPages-1)
        {
            currentPage++;
            int currtemp = currentPage+1;
            sumPan.Sidantal.setText("" + currtemp + " Av " + numberOfPages);
            // updateTitle(); // AH* Borttagen i senare.
            showPage(currentPage);
        }
    }
     *
     */

    /* Finns i PDFReader
    public void previousPage()
    {
        if (currentPage > 0 )
        {
             int currtemp = currentPage;
            currentPage--;
            sumPan.Sidantal.setText("" + currtemp + " Av " + numberOfPages);
            // updateTitle(); // AH* Borttagen i senare.
            showPage(currentPage);
        }
    }
     *
     */

    /* Metod som hämtar filnamn från dialog. Med här bara för demo syften.
     *
     */

    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt)
    {
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(currentDir);

        ExtensionFileFilter pdfFilter = new ExtensionFileFilter(new String[] {"PDF"}, "PDF Files");
        chooser.setFileFilter(pdfFilter);
        int result = chooser.showOpenDialog(CogSumSim.this);
        if (result == JFileChooser.APPROVE_OPTION)
        {
            String name = chooser.getSelectedFile().getPath();

            pdfreader.PrepareFile( name, true, false); // Andra argumentet anger om bearbetning med
            // rsse skall användas.
            /*
            currentDir = new File(name).getParentFile();

            // AH* tillagd hantering av RSSE: xxx Här kan vara fel!
            pdfname = name; // Spara namnet till senare!
            try
            {
                rsse = new ReplaceStringStreamEngine(); // AH* nyligen tillagd för
                // att resetta rsse vid inläsning av ny fil! ***** Kan vara felet!
                rsse.doIt(name, "AHPrepout.pdf", false, 100, -1);
                // AH* Vid open skall ingen sammanfattning gÃ¶ras!
            } catch (java.io.IOException jaiie)
            {
                SkrivUt(0, "IOException i openMenuItemAction.");
            } catch (org.apache.pdfbox.exceptions.COSVisitorException cov)
            {
                SkrivUt(0, "COSVisitorException i openMenuItemAction.");
            }
            try
            {
                setTitle( "PDFBox - " + name); // AH* + f.getAbsolutePath() ); Flyttad hit.
                // AH* Nyare: openPDFFile("AHPrepout.pdf", 0); // AH* Tidigare vÃ¤rde name.
                openPDFFile("AHPrepout.pdf"); // AH* Tidigare var 0 andra argumentet.
                // showPage( 0 );
            }
            catch (Exception e)
            {
                e.printStackTrace();
            }
             * */
        }
    }

    // AH* Kan vara fel i nedanstående del! Anropas från panelen då startknappen anv.
    /* Metoden finns i PDFReader.
    public void UppdateraSammanfatta( int sumslidval, int nysida, int valdmening)
    {
        int valdsida = 0; // Sida med den valda meningen.
        if ((pdfname!=null)&&(pdfname!=""))
        {
            try
            {   // Kanske Ã¥terstÃ¤lla rsse innan?
                if (rsse == null) // AH* senaste tillägget 120420.
                    rsse = new ReplaceStringStreamEngine(); // AH* inlagd för att testa om
                // programmet blir ok!+ ************* Är detta OK???
                SkrivUt(4, "Före doIT i UppdateraSammanfatta.");
                if (sumslidval > 100) sumslidval = 100;
                rsse.doIt(pdfname, "AHPrepout.pdf", true, sumslidval, valdmening);
                SkrivUt(4, "Efter doIT i UppdateraSammanfatta.");
                // AH* Vid open skall ingen sammanfattning gÃ¶ras!
                // Ta reda på vad vald sida är!
                valdsida = ReplaceStringStreamEngine.valdsida;
            } catch (java.io.IOException jaiie)
            {
                SkrivUt(0, "IOException i openMenuItemAction.");
            } catch (org.apache.pdfbox.exceptions.COSVisitorException cov)
            {
                SkrivUt(0, "COSVisitorException i openMenuItemAction.");
            }
            try
            {
                // setTitle( "PDFBox - " + name); // AH* + f.getAbsolutePath() ); Flyttad hit.
                SkrivUt(4, "Före openPDFFile i UppdateraSammanfatta.");
                openPDFFile("AHPrepout.pdf"); // AH* Tidigare name. Sid argument borta.
                SkrivUt(4, "Efter openPDFFile i UppdateraSammanfatta.");
                SkrivUt(4, ">>>>> ValdSida: " + valdsida);
                if ((valdsida != -1)&& (valdmening != -1))
                    currentPage = valdsida; // Om en mening är vald, dess sida.
                else
                    currentPage = nysida;
                showPage(currentPage);
            }
            catch (Exception e)
            {
                e.printStackTrace();
            }
        }
    }
     *
     */

    // Anropas från menyvalet.

    private void exitApplication()
    {
        try
        {
            if( document != null )
            {
                document.close();
            }
        }
        catch( IOException io )
        {
            //do nothing because we are closing the application
        }
        this.setVisible( false );
        this.dispose();
    }

    /**
     * @param args the command line arguments
     *
     * @throws Exception If anything goes wrong.
     */
    public static void main(String[] args) throws Exception
    {
        SkrivUt(4, "Före att PDFReader skapats.");
        pdfreader = new PDFReader( true ); //AH* Sist tillagt.
        SkrivUt(4, "Efter att PDFReader skapats.");
        pdfreader.PDFReaderMain();
        SkrivUt(4, "Efter att PDFReader skapats.");
        CogSumSim viewer = new CogSumSim();
        /*
         if( args.length >0 )
        {
            viewer.openPDFFile( args[0] );
        }
         */
        pdfreader.setCogSumSim( viewer );
        viewer.setVisible(true);
        // viewer.SumDialog.setVisible(true); // AH* ändrat sist. Skall inte visas först!
    }

    /*
     *  Finns i PDFReader. Används i main och är därför kvar. Behövs bara
     * då en PDFFil skall läsas.
     */
    /*
     * Denna behövs inte längre, men har behållts för ev framtida behov.
    private void openPDFFile(String file) throws Exception
    {
        if( document != null )
        {
            document.close();
            documentPanel.removeAll();
        }
        InputStream input = null;
        File f = new File( file );
        input = new FileInputStream(f);
        document = parseDocument( input );
        pages = document.getDocumentCatalog().getAllPages();
        numberOfPages = pages.size();
        //AH* Sidantal till GUI:
        sumPan.Sidantal.setText("" + 1 + " Av " + numberOfPages);
        sumPan.sidnrantal = numberOfPages;
        currentFilename = f.getAbsolutePath(); // AH* Borttagen i senare version.
        currentPage = 0;
        updateTitle();
        showPage(0);
    }
     *
     */

    /* showPage används för att visa aktuell sida. Den är nödvändig i CogSumSim.
     *
     */
    public void showPage(int pageNumber)
    {
        int visadsida = pageNumber+1; //AH* nytillagt.
        SkrivUt(4, "ShowPage i CogSumSim.");
        try
        {
            currentPage = pageNumber; //AH* TIllagd för att hålla reda på akt sida.
            PageWrapper wrapper = new PageWrapper( pdfreader );
            wrapper.displayPage( (PDPage)pdfreader.pages.get(pageNumber) );
            if (documentPanel.getComponentCount() > 0)
            {
                documentPanel.remove(0);
            }
            documentPanel.add( wrapper.getPanel() );
            pack();
            sumPan.Sidantal.setText("" + visadsida + " Av " + numberOfPages); // AH* nytt.
        }
        catch (IOException exception)
        {
            exception.printStackTrace();
        }
    }
    /**
     * This will parse a document.
     *
     * @param input The input stream for the document.
     *
     * @return The document.
     *
     * @throws IOException If there is an error parsing the document.
     * Används av OpenPDFFile nu.
     */
    /*
     * Denna behövs inte här längre eftersom openPDFFile inte behövs.
     * Har behållts av för ev framtida utveckling.
    private static PDDocument parseDocument( InputStream input )throws IOException
    {
        PDDocument document = PDDocument.load( input );
        if( document.isEncrypted() )
        {
            try
            {
                document.decrypt( "" );
            }
            catch( InvalidPasswordException e )
            {
                System.err.println( "Error: The document is encrypted." );
            }
            catch( org.apache.pdfbox.exceptions.CryptographyException e )
            {
                e.printStackTrace();
            }
        }

        return document;
    }
     * 
     */

    /**
     * Get the bottom status panel.
     *
     * @return The bottom status panel.
     */
    public ReaderBottomPanel getBottomStatusPanel()
    {
        return bottomStatusPanel;
    }
}
